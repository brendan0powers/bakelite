from dataclasses import dataclass
from enum import Enum
from bakelite.proto.serialization import struct, enum
from bakelite.proto.runtime import Registry, Computer as RComputer, Device as RDevice
from bakelite.proto.runtime import ACK

{{""}}
{{""}}

% for comment in comments:
#{{ comment }}
% endfor

{{""}}

registry = Registry()

{{""}}
{{""}}

% for enum in enums
% if enum.comment
# {{ enum.comment }}
% endif
@enum(registry, '{{to_desc(enum)}}')
class {{ enum.name }}(Enum):
  % for value in enum.values:
  % if value.comment
  #{{ value.comment }}
  % endif
  {{ value.name }} = {{ value.value }}
  % endfor
  {{""}}
  {{""}}
% endfor

% for struct in structs
% if struct.comment
# {{ struct.comment }}
% endif
@struct(registry, '{{to_desc(struct)}}')
@dataclass
class {{ struct.name }}:
  % for member in struct.members:
  % if member.comment
  #{{ member.comment }}
  % endif
  {{ member.name }}: {{map_type(member.type)}}{{ ' = ' + member.value if member.value }}
  % endfor
  {{""}}
  {{""}}
% endfor

{{""}}
{{""}}

%if proto

% for command in proto.commands
@struct(registry, '{{to_desc(cmd_to_struct(command))}}')
@dataclass
class Cmd{{ to_camel_case(command.name) }}:
  % for arg in command.args:
  {{ arg.name }}: {{map_type(arg.type)}}
  % endfor
  {{""}}
  {{""}}
% endfor

class Computer(RComputer):
  def __init__(**kwargs):
    super(
      % for option in proto.options:
      {{option.name}}={{option.value}},
      % endfor
      registry=registry,
      desc='{{to_desc(proto)}}',
      **kwargs
    )
  {{""}}
  % for command in proto.commands:
  def {{command.name}}(self, *args) -> {{map_type(command.return_type)}}:
    return self.send_command(Cmd{{to_camel_case(command.name)}}(*args))
    {{""}}
  % endfor

{{""}}
{{""}}

class Device(RDevice):
  def __init__(**kwargs):
    super(
      % for option in proto.options:
      {{option.name}}={{option.value}},
      % endfor
      registry=registry,
      desc='{{to_desc(proto)}}',
      **kwargs
    )

%endif