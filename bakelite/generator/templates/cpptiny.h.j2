#pragma once

#include "bakelite.h"

% for enum in enums
% if enum.comment
// {{ enum.comment }}
% endif
enum class {{ enum.name }}: {{map_type(enum.type)}} {
  % for value in enum.values:
  % if value.comment
  // {{ value.comment }}
  % endif
  {{ value.name }} = {{ value.value }},
  % endfor
};
{{""}}
{{""}}
% endfor

% for struct in structs
% if struct.comment
// {{ struct.comment }}
% endif
struct {{ struct.name }} {
  % for member in struct.members:
  % if member.comment
  // {{ member.comment }}
  % endif
  {{map_type_member(member)}} {{ member.name }}{{-array_postfix(member)-}}{{-size_postfix(member)-}} {{- ' = ' + member.value if member.value -}};
  % endfor
  {{""}}
  template<class T>
  int pack(T &stream) const {
    int rcode = 0;
    % for member in struct.members:
    rcode = {{write_type(member)}}
    if(rcode != 0)
      return rcode;
    % endfor
    return rcode;
  }
  {{""}}
  template<class T>
  int unpack(T &stream) {
    int rcode = 0;
    % for member in struct.members:
    rcode = {{read_type(member)}}
    if(rcode != 0)
      return rcode;
    % endfor
    return rcode;
  }
};
{{""}}
{{""}}

% endfor

% if proto
template <class F = {{framer}}>
class ProtocolBase {
public:
  using ReadFn  = int (*)();
  using WriteFn = size_t (*)(const char *data, size_t length);

  enum class Message {
    NoMessage = -1,
    % for id in message_ids:
    {{id[0]}} = {{id[1]}},
    % endfor
  };

  ProtocolBase(ReadFn read, WriteFn write): m_readFn(read), m_writeFn(write) {}

  Message poll() {
    int byte = (*m_readFn)();
    if(byte < 0) {
      return Message::NoMessage;
    }

    auto result = m_framer.readFrameByte((char)byte);
    if(result.status == Bakelite::CobsDecodeState::Decoded) {
      if(result.length == 0) {
        return Message::NoMessage;
      }
      
      m_receivedMessage = (Message)result.data[0];
      m_receivedFrameLength = result.length - 1;
      return m_receivedMessage;
    }

    return Message::NoMessage;
  }

  % for message in message_ids:
  int send(const {{message[0]}} &val) {
    Bakelite::BufferStream outStream((char *)m_framer.writeBuffer() + 1, m_framer.writeBufferSize() - 1);
    m_framer.writeBuffer()[0] = (char)Message::{{message[0]}};
    size_t startPos = outStream.pos();
    val.pack(outStream);
    // Input fame size is the difference in stream position, plus the message byte
    size_t frameSize = ((outStream.pos() - startPos)) + 1;
    auto result = m_framer.encodeFrame(frameSize);

    if(result.status != 0) {
      return result.status;
    }
    
    int ret = (*m_writeFn)((const char *)result.data, result.length);
    return ret == result.length ? 0 : -1;
  }
  {{""}}
  % endfor

  % for message in message_ids:
  int decode({{message[0]}} &val, char *buffer = nullptr, size_t length = 0) {
    if(m_receivedMessage != Message::{{message[0]}}) {
      return -1;
    }
    Bakelite::BufferStream stream(
      (char *)m_framer.readBuffer() + 1, m_receivedFrameLength,
      buffer, length
    );
    return val.unpack(stream);
  }
  {{""}}
  % endfor

private:
  ReadFn m_readFn;
  WriteFn m_writeFn;
  F m_framer;

  size_t m_receivedFrameLength = 0;
  Message m_receivedMessage = Message::NoMessage;
};

using Protocol = ProtocolBase<>;
{{""}}
{{""}}
% endif
